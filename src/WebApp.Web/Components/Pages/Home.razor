@inject WebApp.Web.Services.IAIService AIService
@page "/"



<PageTitle>AI Chat & Image Generator</PageTitle>

<div class="container ai-chat">
	<h1>AI Chat & Image Generator</h1>
	<div class="prompt-box">
		<input class="form-control" placeholder="프롬프트를 입력하세요..." @bind="userPrompt" @onkeydown="OnPromptKeyDown" disabled="@(isLoading)" />
		<button class="btn btn-primary" @onclick="SendPrompt" disabled="@(isLoading || string.IsNullOrWhiteSpace(userPrompt))">전송</button>
	</div>
	<div class="suggestions">
		<span>추천 프롬프트:</span>
	<button class="btn btn-outline-secondary" @onclick="@(() => SetPrompt("who am I"))">who am I</button>
	<button class="btn btn-outline-secondary" @onclick="@(() => SetPrompt("create a pixelated image of a beaver"))">create a pixelated image of a beaver</button>
	</div>
	<div class="chat-history">
		@foreach (var msg in chatHistory)
		{
			<div class="chat-msg @(msg.IsUser ? "user" : "ai")">
				@if (msg.IsUser)
				{
					<div class="user-msg">🧑‍💻 @msg.Text</div>
				}
				else
				{
					@if (msg.ImageUrls?.Count > 0)
					{
						<div class="ai-msg">
							@foreach (var img in msg.ImageUrls)
							{
								<img src="@img" alt="AI 이미지" class="ai-image" />
							}
						</div>
					}
					@if (!string.IsNullOrWhiteSpace(msg.Text))
					{
						<div class="ai-msg">@((MarkupString)msg.Text)</div>
					}
					@if (!string.IsNullOrWhiteSpace(msg.ErrorMessage))
					{
						<div class="alert alert-danger">오류: @msg.ErrorMessage</div>
					}
				}
			</div>
		}
	</div>
	@if (isLoading)
	{
		<div class="loading"><span class="spinner-border"></span> AI 응답을 기다리는 중...</div>
	}
	@if (!string.IsNullOrWhiteSpace(errorMessage))
	{
		<div class="alert alert-danger">오류: @errorMessage <button class="btn btn-link" @onclick="Retry">재시도</button></div>
	}
	<div class="mcp-tools-panel">
		<button class="btn btn-sm btn-secondary" @onclick="ToggleToolsPanel">@((showToolsPanel ? "▼" : "►")) MCP 툴 패널</button>
		@if (showToolsPanel && mcpTools?.Count > 0)
		{
			<div class="tools-list">
				<ul>
					@foreach (var tool in mcpTools)
					{
						<li>@tool</li>
					}
				</ul>
			</div>
		}
	</div>
</div>

@code {
	private string userPrompt = string.Empty;
	private bool isLoading = false;
	private string? errorMessage;
	private List<ChatMessage> chatHistory = new();
	private List<string> mcpTools = new();
	private bool showToolsPanel = false;

	protected override async Task OnInitializedAsync()
	{
		await LoadMcpTools();
	}

	private async Task SendPrompt()
	{
		if (string.IsNullOrWhiteSpace(userPrompt)) return;
		isLoading = true;
		errorMessage = null;
		chatHistory.Add(new ChatMessage { Text = userPrompt, IsUser = true });
		StateHasChanged();
		try
		{
			var response = await AIService.SendPromptAsync(userPrompt);
			chatHistory.Add(new ChatMessage {
				Text = response.Text,
				ImageUrls = response.ImageUrls,
				ErrorMessage = response.IsError ? response.ErrorMessage : null,
				IsUser = false
			});
		}
		catch (Exception ex)
		{
			errorMessage = ex.Message;
			chatHistory.Add(new ChatMessage { ErrorMessage = ex.Message, IsUser = false });
		}
		finally
		{
			isLoading = false;
			userPrompt = string.Empty;
			StateHasChanged();
		}
	}

	private void SetPrompt(string prompt)
	{
		userPrompt = prompt;
	}

	private async Task Retry()
	{
		await SendPrompt();
	}

	private async Task LoadMcpTools()
	{
		try
		{
			mcpTools = await AIService.GetMcpToolsAsync();
		}
		catch
		{
			mcpTools = new List<string>();
		}
	}

	private void ToggleToolsPanel()
	{
		showToolsPanel = !showToolsPanel;
	}

	private async Task OnPromptKeyDown(KeyboardEventArgs e)
	{
		if (e.Key == "Enter" && !isLoading && !string.IsNullOrWhiteSpace(userPrompt))
		{
			await SendPrompt();
		}
	}

	public class ChatMessage
	{
		public string? Text { get; set; }
		public List<string> ImageUrls { get; set; } = new();
		public string? ErrorMessage { get; set; }
		public bool IsUser { get; set; }
	}
}
