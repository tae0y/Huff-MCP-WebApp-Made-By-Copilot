@page "/settings"
@using WebApp.Web.Models
@inject WebApp.Web.Services.IConfigurationService ConfigService

<h1>Settings</h1>

<EditForm Model="settingsModel" OnValidSubmit="HandleValidSubmit">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<div class="mb-3 d-flex align-items-center">
		<label for="provider" class="form-label me-2">AI Provider</label>
		<select id="provider" class="form-select me-2" style="width:180px;" @bind="settingsModel.Provider">
			<option value="AzureOpenAI">Azure OpenAI</option>
			<option value="HuggingFace">Hugging Face</option>
			<option value="GitHub">GitHub</option>
		</select>
		<span class="badge @(string.IsNullOrEmpty(settingsModel.Provider) ? "bg-danger" : "bg-success")">
			@(string.IsNullOrEmpty(settingsModel.Provider) ? "미입력" : "입력됨")
		</span>
		<ValidationMessage For="@(() => settingsModel.Provider)" />
	</div>
	@if (settingsModel.Provider == "AzureOpenAI")
	{
		<div class="mb-3 d-flex align-items-center">
			<label for="apiKey" class="form-label me-2">API Key (Azure OpenAI)</label>
			<input id="apiKey" type="text" class="form-control me-2" style="width:180px;" @bind="settingsModel.ApiKey" />
			<span class="badge @(string.IsNullOrEmpty(settingsModel.ApiKey) ? "bg-danger" : "bg-success")">
				@(string.IsNullOrEmpty(settingsModel.ApiKey) ? "미입력" : "입력됨")
			</span>
			<ValidationMessage For="@(() => settingsModel.ApiKey)" />
		</div>
		<div class="mb-3 d-flex align-items-center">
			<label for="endpoint" class="form-label me-2">Endpoint (Azure OpenAI)</label>
			<input id="endpoint" type="text" class="form-control me-2" style="width:180px;" @bind="settingsModel.Endpoint" />
			<span class="badge @(string.IsNullOrEmpty(settingsModel.Endpoint) ? "bg-danger" : "bg-success")">
				@(string.IsNullOrEmpty(settingsModel.Endpoint) ? "미입력" : "입력됨")
			</span>
			<ValidationMessage For="@(() => settingsModel.Endpoint)" />
		</div>
		<div class="mb-2 text-secondary small">Azure OpenAI를 사용하려면 엔드포인트와 API Key를 입력하세요.</div>
	}
	else if (settingsModel.Provider == "HuggingFace")
	{
		<div class="mb-3 d-flex align-items-center">
			<label for="apiKey" class="form-label me-2">Access Token (Hugging Face)</label>
			<input id="apiKey" type="text" class="form-control me-2" style="width:180px;" @bind="settingsModel.ApiKey" />
			<span class="badge @(string.IsNullOrEmpty(settingsModel.ApiKey) ? "bg-danger" : "bg-success")">
				@(string.IsNullOrEmpty(settingsModel.ApiKey) ? "미입력" : "입력됨")
			</span>
			<ValidationMessage For="@(() => settingsModel.ApiKey)" />
		</div>
		<div class="mb-2 text-secondary small">Hugging Face를 사용하려면 Access Token만 입력하면 됩니다.</div>
	}
	else if (settingsModel.Provider == "GitHub")
	{
		<div class="mb-3 d-flex align-items-center">
			<label for="apiKey" class="form-label me-2">GitHub Token</label>
			<input id="apiKey" type="text" class="form-control me-2" style="width:180px;" @bind="settingsModel.ApiKey" />
			<span class="badge @(string.IsNullOrEmpty(settingsModel.ApiKey) ? "bg-danger" : "bg-success")">
				@(string.IsNullOrEmpty(settingsModel.ApiKey) ? "미입력" : "입력됨")
			</span>
			<ValidationMessage For="@(() => settingsModel.ApiKey)" />
		</div>
		<div class="mb-2 text-secondary small">GitHub 기반 모델을 사용하려면 Personal Access Token을 입력하세요.</div>
	}
	<button type="submit" class="btn btn-primary me-2">저장</button>
	<button type="button" class="btn btn-outline-secondary me-2" @onclick="QuickFill">빠른설정</button>
	<button type="button" class="btn btn-outline-danger" @onclick="ResetSettings">초기화</button>
</EditForm>

@if (!string.IsNullOrEmpty(successMessage))
{
	<div class="alert alert-success mt-3">@successMessage
		<span class="badge bg-success ms-2">설정 완료</span>
	</div>
}

@if (!string.IsNullOrEmpty(successMessage))
{
	<div class="alert alert-success mt-3">@successMessage</div>
}

@code {
	private SettingsModel settingsModel = new();
	private string? successMessage;

	protected override async Task OnInitializedAsync()
	{
		var loaded = await ConfigService.LoadSettingsAsync();
		if (loaded != null)
		{
			settingsModel = loaded;
		}
	}

	private async Task HandleValidSubmit()
	{
		await ConfigService.SaveSettingsAsync(settingsModel);
		successMessage = "설정이 저장되었습니다!";
	}

	private void QuickFill()
	{
		switch (settingsModel.Provider)
		{
			case "AzureOpenAI":
				settingsModel.ApiKey = "sample-azure-api-key";
				settingsModel.Endpoint = "https://sample.openai.azure.com/";
				break;
			case "HuggingFace":
				settingsModel.ApiKey = "sample-hf-token";
				settingsModel.Endpoint = string.Empty;
				break;
			case "GitHub":
				settingsModel.ApiKey = "ghp_samplegithubtoken";
				settingsModel.Endpoint = string.Empty;
				break;
		}
		successMessage = "빠른설정 값이 입력되었습니다.";
	}

	private void ResetSettings()
	{
		settingsModel = new SettingsModel();
		successMessage = "설정이 초기화되었습니다.";
	}
}
